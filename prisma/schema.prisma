// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  STUDENT
  ADMIN
}

enum TokenType {
  AUTH
  FORGOT
  VERIFY
  EMAIL
}

enum NavListType {
  DROPDOWN
  ITEM
}

model User {
  id            String    @id @default(uuid())
  name          String    @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  role          Role[]    @default([USER])
  isActive      Boolean   @default(false)
  emailVerified DateTime? @db.Timestamptz()
  password      String
  image         String?   @db.VarChar(255)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  // Relations
  tokens            Token[]
  verifyRequests    ActivationRequest[]
  databaseMahasiswa DatabaseMahasiswa[]

  @@map("users")
}

model Token {
  id         BigInt    @id @default(autoincrement())
  userId     String
  type       TokenType
  value      String    @unique @db.VarChar(255)
  expireDate DateTime  @db.Timestamptz()
  createdAt  DateTime  @default(now()) @db.Timestamptz()

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

enum ActivationRequestStatus {
  PENDING
  REJECTED
  APPROVED
}

model ActivationRequest {
  id        BigInt                  @id @default(autoincrement())
  userId    String
  file      String
  status    ActivationRequestStatus @default(PENDING)
  createdAt DateTime                @default(now()) @db.Timestamptz()

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activation_requests")
}

model Nav {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(255)
  role      Role        @default(USER)
  type      NavListType
  isActive  Boolean     @default(false)
  url       String?     @db.VarChar(255)
  navlistId Int?

  // Relation
  navlist  Nav?  @relation("NavlistNavitems", fields: [navlistId], references: [id])
  navitems Nav[] @relation("NavlistNavitems")

  @@map("nav_lists")
}

enum Gender {
  MALE
  FEMALE
}

enum TempatTinggal {
  APPARTEMENT
  DORMITORY
}

enum Pendidikan {
  TOMER
  S1
  S2
  S3
}

model DatabaseMahasiswa {
  id              String        @id @default(uuid())
  userId          String        @unique
  birthPlace      String        @db.VarChar(255)
  birthDate       DateTime      @db.Date
  wa              String        @db.VarChar(255)
  telp            String        @db.VarChar(255)
  domisili        String        @db.VarChar(255)
  gender          Gender
  tempatTinggal   TempatTinggal
  university      String        @db.VarChar(255)
  department      String        @db.VarChar(255)
  strata          Pendidikan
  tahunKedatangan String        @db.VarChar(4)
  studentId       String        @unique @db.VarChar(10)
  fileOgrenci     String        @db.VarChar(255)
  passportId      String        @unique @db.VarChar(255)
  filePassport    String        @db.VarChar(255)
  ikametId        String        @unique @db.VarChar(11)
  fileIkamet      String        @db.VarChar(255)

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  @@map("mahasiswa_databases")
}
